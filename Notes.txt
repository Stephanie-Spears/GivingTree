==========================================================================
* (General Debugging Notes) *
--------------------------------------------------------------------------

 * Autos and Locals Windows*
 * The Autos and Locals windows show variable values while you are debugging. The windows are only available during a debugging session. The Autos window shows variables used around the current breakpoint. The Locals window shows variables defined in the local scope, which is usually the current function or method.

 * Immediate Window *
Use the Immediate window to debug and evaluate expressions, execute statements, and print variable values. The Immediate window evaluates expressions by building and using the currently selected project.

To display the Immediate window, open a project for editing, and then choose Debug > Windows > Immediate or press Ctrl+Alt+I. You can also enter Debug.Immediate in the Command window.

Typing this into the immediate window gives the same results, the '?' form is shorthand. Both return "Google":
	>Debug.Print loginProviders[0].Caption
	? loginProviders[0].Caption


==========================================================================
* (HPlusSports Project - Business Logic & View Models) *
--------------------------------------------------------------------------

This solution is split into two projects, "Website" and "Common". Common contains all of the data access logic, and other business-related classes. The Website project contains only models related to the web application, such as view models.

* Business Logic - defines how your business works, not related to any framework or platform.
	Ex: how you manage product inventory or fulfill customer orders (doesn't have anything to do with the asp.net framework)

* A View Model is a class whose only purpose is to encapsulate and carry all the information that is needed to render a view. Some of the models in the application may serve a dual purpose. 


==========================================================================
* (Reducing Namespace Refrences with Global Imports) *
--------------------------------------------------------------------------

Inside Views/Web.config there's a list of namespaces, to which you can add the project and project models namespaces so that they'll be available in all of the views. This will allow us to remove all of the redundant namespaces in the views, including any @using directives that have been used.
	  <namespaces>
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Optimization"/>
        <add namespace="System.Web.Routing" />
        <add namespace="HPlusSports"/>
        <add namespace="HPlusSports.Models"/>
      </namespaces>


==========================================================================
* (Customizing Routes with Attribute Routing) *
--------------------------------------------------------------------------

In RouteConfig.cs you can implement custom routing by adding the following line
			routes.MapMvcAttributeRoutes();
This allows us to add attributes on top of controller actions to specify custom routing.

For example, in our HomeController.cs, if we want to specify that our 'home/contact' route should instead just be '/contact', we can add the	  [Route("contact")] decoration above the Contact() action

		[Route("contact")]
		public ActionResult Contact()
		{
			return View(); 
		}

We can also specify a secondary (made optional by adding the nullable character '?') parameter inside our custom routing decoration. This makes it so that instead of the default 'home/about' routing behavior, it will now route to just '/about'. The optional secondary parameter allows the next part of the path to either be empty, or to pass in a value that gets used and returned to the view. So if we navigate to '/about/Stephanie' the value 'name = Stephanie' will get passed in and consumed by the view.

		[Route("about/{name?}")]
		public ActionResult About(string name)
		{ 
			ViewBag.Message = "Your application description page " + name;
			return View();
		}

Additionally, if we want to specify a route for the entire controller, we can add it at the top of the controller class as  [RoutePrefix("home/{name}")]	 which will route all of the ActionResults contained within it to /home/{string parameter that can be used further down}.
For example, navigating to '/home/Stephanie/about' would then display "Your application description page Stephanie".

	[RoutePrefix("home/{name}")]
	public class HomeController : Controller
	{ 
	...
		[Route("about")]
		public ActionResult About(string name)
		{
			ViewBag.Message = "Your application description page " + name;
			return View();
		}

		public ActionResult Contact()
		{
			ViewBag.Message = "Your contact page.";
			return View();
		}
	...
	}

(^The final example with RoutePrefix() isn't useful for this project)


==========================================================================
* (Elmah) *
--------------------------------------------------------------------------

Admin role auto-seeded into database as:
	admin@hplussports.com // password
This allows us to access the advanced error reporting that comes with the nuget package 'elmah'. The access details for this are configured in web.config appSettings. Currently you must be a user with the role of admin, and to view the elmah error reporting we can go to whatever site we're debugging at (i.e. 'https://localhost:44350/elmah' or 'http://localhost:65128/elmah') to view more explicit error details.

web.config:
	<appSettings>
		<add key="elmah.mvc.disableHandler" value="false" />
		<add key="elmah.mvc.disableHandleErrorFilter" value="false" />
		<add key="elmah.mvc.requiresAuthentication" value="true" />
		<add key="elmah.mvc.IgnoreDefaultRoute" value="false" />
		<add key="elmah.mvc.allowedRoles" value="Admin" />
		<add key="elmah.mvc.allowedUsers" value="*" />
		<add key="elmah.mvc.route" value="elmah" />
		<add key="elmah.mvc.UserAuthCaseSensitive" value="true" />
	</appSettings>

(^As of 2021 there are more comprehensive and widely used error reporting options than elmah, though it is still used for situations in which complex error reporting isn't necessary)


==========================================================================
* (Using Extension Methods to Remove Magic Strings) *
--------------------------------------------------------------------------

* A magic string is just a string that you've hardcoded into your program, possibly several times, or with unspecific/confusing variable names. The main problem with magic strings is that they aren't checked at compile time, which means that the program will build without any errors, even if you've accidentally introduced a typo, or if it's used in several places but you've forgotten to update the value in every one of those places. This can also be a problem if you unintentionally use the same variable name for two different strings (ie. name="username" and name="firstname") - so if you were to do a Find & Replace, you might accidentally rename both variables and break the program.
* To guard against the type of bugs magic strings can introduce, it is better to instead declare the string as a constant, and perhaps in a common global file.

Magic strings are values like
	TempData["SuccessMessage"] = $"Succesfully added {item.Name} to the cart"; 
This is used to pass a success message from one controller action to a view in another controller action via the TempData property. These values, however, provide no compile-time guarantee that you've actually gotten the right data.

Extension methods can only live in static classes, so adding custom extension methods like TempDataExtensions.cs will need to be made static.

Dropping the namespace from GivingTree.Web.Extensions to GivingTree.Web will make it so the class is available throughout the application, without having to explicitly import the namespace. 


==========================================================================
* (Using Extension Methods to Strongly Type Common Actions) *
--------------------------------------------------------------------------

It can be useful to create a strongly typed wrapper around the Url.Action() Url Helper method because it can reduce the amount of duplicate code and magic strings. 


==========================================================================
* (Title) *
--------------------------------------------------------------------------
body


==========================================================================
* (Title) *
--------------------------------------------------------------------------
body


==========================================================================
* (Title) *
--------------------------------------------------------------------------
body


==========================================================================
* (Title) *
--------------------------------------------------------------------------
body


==========================================================================
* (Title) *
--------------------------------------------------------------------------
body
